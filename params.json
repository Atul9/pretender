{"name":"Pretender","tagline":"Simple, powerful user impersonation for Rails","body":"# Pretender\r\n\r\nAs an admin, there are times you want to see exactly what another user sees.  Meet Pretender.\r\n\r\n- Easily to switch between users\r\n- Minimal code changes\r\n- Plays nicely with auditing tools\r\n\r\n[Rock on](http://www.youtube.com/watch?v=SBjQ9tuuTJQ) :boom:\r\n\r\nPretender is flexible and lightweight - less than 40 lines of code :-)\r\n\r\nWorks with Rails 2.3+ and any authentication system - [Devise](https://github.com/plataformatec/devise), [Authlogic](https://github.com/binarylogic/authlogic), and [Sorcery](https://github.com/NoamB/sorcery) to name a few.\r\n\r\n[Battle-tested at Instacart](https://www.instacart.com)\r\n\r\n## Installation\r\n\r\nAdd this line to your application’s Gemfile:\r\n\r\n```ruby\r\ngem 'pretender'\r\n```\r\n\r\nAnd add this to your `ApplicationController`:\r\n\r\n```ruby\r\nclass ApplicationController < ActionController::Base\r\n  impersonates :user\r\nend\r\n```\r\n\r\n## How It Works\r\n\r\nSign in as another user with:\r\n\r\n```\r\nimpersonate_user(user)\r\n```\r\n\r\nThe `current_user` method now returns the impersonated user.\r\n\r\nYou can access the true user with:\r\n\r\n```\r\ntrue_user\r\n```\r\n\r\nAnd stop impersonating with:\r\n\r\n```ruby\r\nstop_impersonating_user\r\n```\r\n\r\n### Sample Implementation\r\n\r\n```ruby\r\nclass Admin::UsersController < ApplicationController\r\n  before_filter :require_admin!\r\n\r\n  def impersonate\r\n    user = User.find(params[:id])\r\n    impersonate_user(user)\r\n    redirect_to root_path\r\n  end\r\n\r\n  def stop_impersonating\r\n    stop_impersonating_user\r\n    redirect_to root_path\r\n  end\r\n\r\nend\r\n```\r\n\r\nShow when someone is signed in as another user in your application layout.\r\n\r\n```erb\r\n<% if current_user != true_user %>\r\n  You (<%= true_user.name %>) are signed in as <%= current_user.name %>\r\n  <%= link_to \"Back to admin\", stop_impersonating_path %>\r\n<% end %>\r\n```\r\n\r\n## Audits\r\n\r\nIf you keep audit logs with a library like [Audited](https://github.com/collectiveidea/audited), make sure it uses the **true user**.\r\n\r\n```ruby\r\nAudited.current_user_method = :true_user\r\n```\r\n\r\n## Configuration\r\n\r\nPretender is super flexible.  You can change the names of methods and even impersonate multiple roles at the same time.  Here’s the default configuration.\r\n\r\n```ruby\r\n# app/controllers/application_controller.rb\r\nimpersonates :user,\r\n             :method => :current_user,\r\n             :with => proc{|id| User.where(:id => id).first }\r\n```\r\n\r\nMold it to fit your application.\r\n\r\n```ruby\r\n# app/controllers/application_controller.rb\r\nimpersonates :account,\r\n             :method => :authenticated_account,\r\n             :with => proc{|id| EnterpriseAccount.where(:id => id).first }\r\n```\r\n\r\nThis creates three methods:\r\n\r\n```ruby\r\ntrue_account\r\nimpersonate_account\r\nstop_impersonating_account\r\n```\r\n\r\n## Contributing\r\n\r\nEveryone is encouraged to help improve this project. Here are a few ways you can help:\r\n\r\n- [Report bugs](https://github.com/ankane/pretender/issues)\r\n- Fix bugs and [submit pull requests](https://github.com/ankane/pretender/pulls)\r\n- Write, clarify, or fix documentation\r\n- Suggest or add new features\r\n","google":"UA-39027070-1","note":"Don't delete this file! It's used internally to help with page regeneration."}