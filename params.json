{"name":"Pretender","tagline":"Login as another user","body":"# Pretender\r\n\r\nAs an admin, there are times you want to see exactly what another user sees or take action on behalf of a user.  Pretender provides the ability to login as another user **the right way**.\r\n\r\nWhat is the right way?\r\n\r\n- Easy to switch back and forth between roles\r\n- Minimal code changes\r\n- Plays nicely with auditing tools\r\n\r\n[Rock on](http://www.youtube.com/watch?v=SBjQ9tuuTJQ) :boom:\r\n\r\nPretender is also flexible and lightweight - less than 40 lines of code :-)\r\n\r\nPretender works with Rails 2.3 and above.\r\n\r\n## Get started\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```ruby\r\n# Gemfile\r\ngem 'pretender'\r\n```\r\n\r\nAnd add this line to your ApplicationController:\r\n\r\n```ruby\r\n# app/controllers/application_controller.rb\r\nclass ApplicationController < ActionController::Base\r\n  impersonates :user\r\nend\r\n```\r\n\r\nThis adds three methods to your controllers:\r\n\r\n```ruby\r\ntrue_user\r\n# returns authenticated user\r\n\r\nimpersonate_user(user)\r\n# allows you to login as another user\r\n\r\nunimpersonate_user\r\n# become yourself again\r\n  ```\r\n\r\nAnd changes the behavior of another:\r\n\r\n```ruby\r\ncurrent_user\r\n# now returns:\r\n# - if impersonating, the impersonated user\r\n# - otherwise, the true user\r\n```\r\n\r\n**Note:** the name of this method is configurable (details at the end)\r\n\r\nNow we need to setup a way to login as another user.  **Pretender makes no assumptions about how you want to do this**.  I like to add this to my admin dashboard.\r\n\r\n#### Sample Implementation\r\n\r\n```ruby\r\nclass Admin::UsersController < ApplicationController\r\n  before_filter :require_admin, :except => [:unimpersonate]\r\n\r\n  def impersonate\r\n    user = User.find(params[:id])\r\n    impersonate_user(user)\r\n    redirect_to root_path\r\n  end\r\n\r\n  # do not require admin for this method if access control\r\n  # is performed on the current_user instead of true_user\r\n  def unimpersonate\r\n    unimpersonate_user\r\n    redirect_to admin_path\r\n  end\r\nend\r\n```\r\n\r\nYou may want to make it obvious to an admin when he / she is logged in as another user.  I like to add this to the application layout.\r\n\r\n#### Haml / Slim\r\n\r\n```haml\r\n- # app/views/layouts/application.haml\r\n- if current_user != true_user\r\n  .alert\r\n    You (#{true_user.name}) are logged in as #{current_user.name}\r\n    = link_to \"Back to admin\", unimpersonate_user_path\r\n```\r\n\r\n### Audits\r\n\r\nIf you keep audit logs with a library like [audited](https://github.com/collectiveidea/audited), make sure it uses the **true user**.\r\n\r\n```ruby\r\nAudited.current_user_method = :true_user\r\n```\r\n\r\n### Configuration\r\n\r\nPretender is super flexible.  You can change the names of methods and even impersonate multiple roles at the same time.  Here's the default configuration.\r\n\r\n```ruby\r\n# app/controllers/application_controller.rb\r\nimpersonates :user,\r\n             :method => :current_user,\r\n             :with => proc{|id| User.where(:id => id).first }\r\n```\r\n\r\nMold it to fit your application.\r\n\r\n```ruby\r\n# app/controllers/application_controller.rb\r\nimpersonates :account,\r\n             :method => :authenticated_account,\r\n             :with => proc{|id| EnterpriseAccount.where(:id => id).first }\r\n```\r\n\r\nThis creates three methods:\r\n\r\n```ruby\r\ntrue_account\r\nimpersonate_account\r\nunimpersonate_account\r\n```\r\n\r\nAlso, authenticated_account is overridden with `EnterpriseAccount.where(:id => id).first`\r\n\r\n### That's all folks!\r\n","google":"UA-39027070-1","note":"Don't delete this file! It's used internally to help with page regeneration."}
